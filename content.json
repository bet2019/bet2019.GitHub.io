{"meta":{"title":"Bet2019","subtitle":"","description":"","author":"Daniel Niu","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2017-10-04T05:02:37.000Z","updated":"2020-11-17T05:12:04.828Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"关于我 About me 关于我 联系我 邮箱：niuxiaohui03@163.com GitHub: https://github.com/bet2019"},{"title":"Repositories","date":"2020-11-17T05:19:48.570Z","updated":"2020-11-17T05:19:48.570Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-11-12T06:38:49.587Z","updated":"2020-09-01T14:02:39.000Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-11-12T06:38:49.591Z","updated":"2020-09-01T14:02:39.000Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-11-17T05:32:05.078Z","updated":"2020-11-17T05:32:05.078Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":"ddd *"}],"posts":[{"title":"AzureDevOps使用技一（删除commit）","slug":"AzureDevOps使用技一（删除commit）","date":"2020-11-17T05:35:38.000Z","updated":"2020-11-17T05:49:33.997Z","comments":true,"path":"2020/11/17/AzureDevOps使用技一（删除commit）/","link":"","permalink":"http://example.com/2020/11/17/AzureDevOps%E4%BD%BF%E7%94%A8%E6%8A%80%E4%B8%80%EF%BC%88%E5%88%A0%E9%99%A4commit%EF%BC%89/","excerpt":"","text":"TortoiseGit删除最后commit之前的连续commit 在最后提交commit之前， 可能有很小的改动，如typo，删除console.log等。那么可以把这些小改动放到最后的commit，删除之前的commit。 TortoiseGit打开commit log 在要删除的那些commit的前一个commit上，右键后，选择reset xxx to this 然后，右键这个commit id后，选择push 使用git的话，2个命令搞定： 12git reset --hard abc526ef839882b6d631c0c59296a2d6d43dae34 #想要恢复到的版本commit idgit push origin HEAD --force 在Azure Devops的Repo环境上使用 在Azure DeveOps环境上，可能会出现请使用ForcePush类似错误提示。那么确认在Project Settings-&gt;Repos-&gt;Repositories-&gt;你所在的group-&gt;Force push，对这个选项，选择Allow，如下图","categories":[],"tags":[]},{"title":"第一个Blog","slug":"第一个Blog","date":"2020-11-11T07:13:55.000Z","updated":"2020-11-12T12:43:43.945Z","comments":true,"path":"2020/11/11/第一个Blog/","link":"","permalink":"http://example.com/2020/11/11/%E7%AC%AC%E4%B8%80%E4%B8%AABlog/","excerpt":"","text":"第一个Blog 用GitHub Pages搭建个人Blog，非常简单实用。主要有以下3个关键步骤 搭建开发环境 新建GitHub Repo Hexo框架 搭建开发环境 安装Node.js，Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。安装完Node.js后，npm也就安装上了，npm是包含在node.js里面的一个包管理工具，就像Linux中的yum，rpm包管理；python中的pip包管理工具一样，这会经常npm的命令。 安装TortoiseGit，安装其他的也可以Git，SourceTree等 安装Vistual Studio Code或其他IDE 创建GitHub仓库 登录GitHub（如果没账号，请注册）。 新建一个 你GitHub用户名.github.io 仓库，那么搭建成功后，你的网站访问地址就是 http://你GitHub用户名.github.io了。这样的话，可以免费使用了，如果想绑定其他域名的话，可以去阿里等运营商购买，关于DNS，https配置csdn上都有相关文章可以参考。 注意，这里创建的GitHub仓库不是放hexo代码的，而是放hexo generate命令之后的public文件的 Hexo框架 hexo是快速、简洁且高效的博客框架，有超快速度渲染，支持Markdown，一键部署，插件和可扩展性等。 安装hexo， 1$ npm install -g hexo 新建一个文件夹，在文件夹里，右键使用VS Code打开。在VS Code的菜单的Terminal，点击新建Terminal后，在Terminal运行 1$ hexo init 命令，成功后会在这个文件夹出现hexo初始文件。 生成和本地预览 12$ hexo generate #生成静态页面至public目录$ hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server） 发布前，一般可能要安装 1$ npm install --save hexo-deployer-git 然后修改根目录下的*_config.yml*，如下： 1234deploy: type: git repo: https://github.com/bet2019/bet2019.GitHub.io.git branch: master hexo基本命令 hexo new “pageName” hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，'ctrl + c’关闭server） hexo deploy #部署到GitHub 更多命令 关于主题样式，更多主题 最后，写Blog熟悉Markdown的语法，会写出样式更丰富的Blog。","categories":[],"tags":[]}],"categories":[],"tags":[]}
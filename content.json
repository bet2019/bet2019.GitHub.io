{"meta":{"title":"Bet2019","subtitle":"","description":"","author":"Daniel Niu","url":"https://bet2019.github.io","root":"/"},"pages":[{"title":"","date":"2020-12-09T04:52:42.522Z","updated":"2020-12-09T04:52:42.522Z","comments":true,"path":"google51549eac8409bddf.html","permalink":"https://bet2019.github.io/google51549eac8409bddf.html","excerpt":"","text":"google-site-verification: google51549eac8409bddf.html"},{"title":"Repositories","date":"2020-11-17T06:43:24.576Z","updated":"2020-11-17T06:43:24.576Z","comments":false,"path":"repository/index.html","permalink":"https://bet2019.github.io/repository/index.html","excerpt":"","text":""},{"title":"Categories","date":"2020-11-17T06:44:18.797Z","updated":"2020-11-17T06:44:18.797Z","comments":false,"path":"categories/index.html","permalink":"https://bet2019.github.io/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2017-10-04T05:02:37.000Z","updated":"2020-11-17T06:36:02.795Z","comments":true,"path":"about/index.html","permalink":"https://bet2019.github.io/about/index.html","excerpt":"","text":"联系我 邮箱：niuxiaohui03@163.com GitHub: https://github.com/bet2019"},{"title":"友情链接","date":"2020-11-12T06:38:49.587Z","updated":"2020-09-01T14:02:39.000Z","comments":true,"path":"links/index.html","permalink":"https://bet2019.github.io/links/index.html","excerpt":"","text":""},{"title":"Tags","date":"2020-11-17T06:44:05.852Z","updated":"2020-11-17T06:44:05.852Z","comments":false,"path":"tags/index.html","permalink":"https://bet2019.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Joi对字符串字段的校验-empty","slug":"Joi对字符串字段的校验-empty","date":"2020-12-09T02:22:14.000Z","updated":"2020-12-09T06:41:05.815Z","comments":true,"path":"article/ace55b2b.html","link":"","permalink":"https://bet2019.github.io/article/ace55b2b.html","excerpt":"","text":"后端用NodeJs开发，在router时候，我们可能会用到 Joi 组件帮助我们对get, patch等方法的params或者body进行校验。 12345router.route(&#x27;/abc&#x27;) .patch(hasPermissions(&#x27;xxx&#x27;), [ validateParams(Joi.object(&#123;uuid: Joi.string().uuid().required()&#125;)), validateBody(validationSchema.editData) ], indexController.editAction) 只能为字符串，但要注意empty 1234567let schema = Joi.object(&#123; name : Joi.string().empty(&quot;&quot;),&#125;);let&#123;error, value&#125; = schema.validate(data);let data = &#123;name:&quot;&quot;&#125; /*通过校验*/ let data = &#123;name:null&#125; /*不通过校验, 提示name必须为string类型*/ 这里着重说明下empty用法，API 17.3.0如下 any.empty(schema) Considers anything that matches the schema to be empty (undefined). 1234let schema = Joi.string().empty(&#x27;&#x27;);schema.validate(&#x27;&#x27;); // returns &#123; error: null, value: undefined &#125;schema = schema.empty();schema.validate(&#x27;&#x27;); // returns &#123; error: &quot;value&quot; is not allowed to be empty, value: &#x27;&#x27; &#125; 如果用了name : Joi.string().empty(“”)，那么name不会传到editAction里面。也就是说’'的情况被忽略。如下场景 什么什么时候给了name变量值，如张三 想在前端给name的输入框，删除张三，保存后，name的值传到后端是’’ 然而，在Joi校验时候，name=''传不到controller的action方法，也就不能保存空字串了。 允许空字符串和null 123let schema = Joi.object(&#123; name : Joi.string().allow(...[null, &quot;&quot;]),&#125;);","categories":[{"name":"NodeJs, Joi","slug":"NodeJs-Joi","permalink":"https://bet2019.github.io/categories/NodeJs-Joi/"}],"tags":[{"name":"Joi","slug":"Joi","permalink":"https://bet2019.github.io/tags/Joi/"}]},{"title":"Fast RTPS on Windows","slug":"Fast-RTPS-on-Windows","date":"2020-12-01T12:20:28.000Z","updated":"2020-12-09T06:41:05.813Z","comments":true,"path":"article/14b425a.html","link":"","permalink":"https://bet2019.github.io/article/14b425a.html","excerpt":"","text":"网上很多资料是Linux环境下的配置步骤，这篇文章是在Windows下安装配置编译链接生成可执行程序的。 关于Fast DDS，可以参考官网。 这里是参考了官网的Windows installation from sources 有三个package要安装 foonathan_memory_vendor, an STL compatible C++ memory allocator library. # 可以简单理解为申请内存的 fastcdr, a C++ library that serializes according to the standard CDR serialization mechanism. # 可以简单理解为序列化，反序列化的 fastrtps, the core library of eProsima Fast DDS library. # fast rtps的核心组件 环境的预配 Visual Studio Chocolatey CMake git OpenSSL(配置环境变量，如OPENSSL_ROOT_DIR=C:\\Program Files\\OpenSSL-Win64) 依赖 Asio TinyXML2 依赖下载后，直接到文件夹里用 1choco install -y -s &lt;PATH_TO_DOWNLOADS&gt; asio tinyxml2 CMake安装方法 我这里用的CMake安装，对比Colcon installation方法，我觉得更能知道install做了什么。 clone下面的每个package的代码，并用cmake编译。 在比如D盘位置，新建Fast-DDS文件夹，或者其他你自定义的文件夹，然后进入该文件夹 Foonathan memory 123456cd D:\\Fast-DDSgit clone https://github.com/eProsima/foonathan_memory_vendor.gitcd foonathan_memory_vendormkdir build &amp;&amp; cd buildcmake .. -DBUILD_SHARED_LIBS=ONcmake --build . --target install cmake build默认是debug的，如果想release，那么添加–config Release Fast CDR 123456cd D:\\Fast-DDSgit clone https://github.com/eProsima/Fast-CDR.gitcd Fast-CDRmkdir build &amp;&amp; cd buildcmake ..cmake --build . --target install Fast DDS 123456cd D:\\Fast-DDSgit clone https://github.com/eProsima/Fast-DDS.gitcd Fast-DDSmkdir build &amp;&amp; cd buildcmake ..cmake --build . --target install 没问题后，在如下应该有。 Fast DDS-Gen的安装(可选) Fast DDS-Gen是从idl文件生成cxx文件的。 环境配置，安装后再配置环境变量 Java JDK Gradle 123git clone --recursive https://github.com/eProsima/Fast-DDS-Gen.gitcd Fast-DDS-Gengradle assemble 在Fast DDS-Gen文件夹里会有 share/fastddsgen, 有个.jar包 scripts, 有bat脚本，用来生成cxx文件。为方便使用，可以添加这个文件夹到系统环境变量或者每次都要指定这个fastddsgen.bat。 用法 新建个idl文件，如HelloWorld.idl 12345// HelloWorld.idlstruct HelloWorld&#123; string message;&#125;; 转换 1D:\\03-ROS\\testFastRTPS&gt; .../fastddsgen.bat -example CMake HelloWorld.idl 会生成如下文件 编译 管理员权限打开’Developer Command Prompt for VS 2019’ 123mkdir build &amp;&amp; cd buildcmake ..cmake --build . 这样就会生成Debug文件夹里的HelloWorld.exe 运行 打开2个CMD或者Powershell 1HelloWorld.exe publisher 1HelloWorld.exe subscriber 会有这样的消息","categories":[{"name":"ROS","slug":"ROS","permalink":"https://bet2019.github.io/categories/ROS/"}],"tags":[{"name":"ROS, Fast DDS","slug":"ROS-Fast-DDS","permalink":"https://bet2019.github.io/tags/ROS-Fast-DDS/"}]},{"title":"ROS on Windows","slug":"ROS-on-Windows","date":"2020-11-30T12:50:56.000Z","updated":"2020-12-07T01:35:29.554Z","comments":true,"path":"article/undefined.html","link":"","permalink":"https://bet2019.github.io/article/undefined.html","excerpt":"","text":"Windows 10下安装ROS2 安装前提 ✔️ 64-bit (amd64) environment of Windows 10 Desktop. ✔️ Visual Studio 2019 with Desktop development with C++ workload included. ✔️ Chocolatey package manager installed. ✔️ Git source control software installed. 安装开始 从开始菜单，找到Developer Command Prompt for VS 2019 用管理员权限打开这个CMD 根据下面步骤安装ROS 2 Foxy版本 1234mkdir c:\\opt\\chocolatey #ROS默认安装在c:\\optset ChocolateyInstall=c:\\opt\\chocolateychoco source add -n=ros-win -s=&quot;https://aka.ms/ros/public&quot; --priority=1choco upgrade ros-foxy-desktop -y --execution-timeout=0 安装完ROS 2 ros-foxy-desktop，大概有5-6G大小。 创建快捷方式 SDF_PATH=c:\\opt\\ros\\foxy\\x64\\share\\sdformat\\1.6 把这个变量添加到环境变量 可以使用Windows Terminal，打开设置后，添加一下 123456...,&#123; &quot;commandline&quot; : &quot;C:\\\\Windows\\\\System32\\\\cmd.exe /k \\&quot;C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Community\\\\Common7\\\\Tools\\\\VsDevCmd.bat\\&quot; -arch=amd64 -host_arch=amd64 &amp;&amp; c:\\\\opt\\\\ros\\\\foxy\\\\x64\\\\setup.bat &amp;&amp; c:\\\\opt\\\\ros\\\\foxy\\\\x64\\\\share\\\\gazebo\\\\setup.bat&quot;, &quot;guid&quot; : &quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b0&#125;&quot;, &quot;name&quot; : &quot;ROS Noetic&quot;&#125; 现在，你就在ROS2的开发命令行窗口中。","categories":[{"name":"Azure, ROS","slug":"Azure-ROS","permalink":"https://bet2019.github.io/categories/Azure-ROS/"}],"tags":[]},{"title":"Azure IoT- MQTT直连IoT Hub","slug":"Azure IoT- MQTT直连IoTHub","date":"2020-11-20T06:56:18.000Z","updated":"2020-12-09T06:41:05.809Z","comments":true,"path":"article/8326aede.html","link":"","permalink":"https://bet2019.github.io/article/8326aede.html","excerpt":"","text":"不使用Azure IoT SDK情况下，MQTT协议直连IoT Hub 参考微软官网文档，不使用Azure IoT SDK情况下，使用MQTT连接IoT Hub的C++示例 下载官网的Repo代码 没安装Vcpkg的话，请安装Vcpkg，这里最好把下载的Vcpkg放在一个路径上没空格的文件夹下，不然这个步骤（.\\vcpkg install mosquitto:x64-windows）一直安装zlib失败 使用VS Code，在安装Azure Extension的情况下，在左侧边栏，展开Azure IoT Hub下的一个IoT设备，右键这个设备选择Start Monitering Built-in Event Point，用来监视MQTT来的数据 修改示例代码的参数，用下面命令获取SAS Token作为PWD 1$ az iot hub generate-sas-token -n &#123;your_iothub_name&#125; 对示例代码，运行TelemetryMQTTWin32工程（Ctrl+F5，或者F5）","categories":[{"name":"Azure","slug":"Azure","permalink":"https://bet2019.github.io/categories/Azure/"}],"tags":[{"name":"Azure, IoT, MQTT","slug":"Azure-IoT-MQTT","permalink":"https://bet2019.github.io/tags/Azure-IoT-MQTT/"}]},{"title":"Azure DevOps - 删除commit","slug":"Azure DevOps - 删除commit","date":"2020-11-17T05:35:38.000Z","updated":"2020-12-09T06:41:05.806Z","comments":true,"path":"article/d621b24e.html","link":"","permalink":"https://bet2019.github.io/article/d621b24e.html","excerpt":"","text":"TortoiseGit删除最后commit之前的连续commit 在最后提交commit之前， 可能有很小的改动，如typo，删除console.log等。那么可以把这些小改动放到最后的commit，删除之前的commit。 TortoiseGit打开commit log 在要删除的那些commit的前一个commit上，右键后，选择reset xxx to this 然后，右键这个commit id后，选择push 使用git的话，2个命令搞定： 12git reset --hard abc526ef839882b6d631c0c59296a2d6d43dae34 #想要恢复到的版本commit idgit push origin HEAD --force 在Azure Devops的Repo环境上使用 在Azure DeveOps环境上，可能会出现请使用ForcePush类似错误提示。那么确认在Project Settings-&gt;Repos-&gt;Repositories-&gt;你所在的group-&gt;Force push，对这个选项，选择Allow，如下图","categories":[{"name":"Azure","slug":"Azure","permalink":"https://bet2019.github.io/categories/Azure/"}],"tags":[{"name":"Azure, DevOps","slug":"Azure-DevOps","permalink":"https://bet2019.github.io/tags/Azure-DevOps/"}]},{"title":"第一个Blog","slug":"第一个Blog","date":"2020-11-11T07:13:55.000Z","updated":"2020-12-09T06:41:05.818Z","comments":true,"path":"article/be09919b.html","link":"","permalink":"https://bet2019.github.io/article/be09919b.html","excerpt":"","text":"第一个Blog 用GitHub Pages搭建个人Blog，非常简单实用。主要有以下3个关键步骤 搭建开发环境 新建GitHub Repo Hexo框架 搭建开发环境 安装Node.js，Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。安装完Node.js后，npm也就安装上了，npm是包含在node.js里面的一个包管理工具，就像Linux中的yum，rpm包管理；python中的pip包管理工具一样，这会经常npm的命令。 安装TortoiseGit，安装其他的也可以Git，SourceTree等 安装Vistual Studio Code或其他IDE 创建GitHub仓库 登录GitHub（如果没账号，请注册）。 新建一个 你GitHub用户名.github.io 仓库，那么搭建成功后，你的网站访问地址就是 http://你GitHub用户名.github.io了。这样的话，可以免费使用了，如果想绑定其他域名的话，可以去阿里等运营商购买，关于DNS，https配置csdn上都有相关文章可以参考。 注意，这里创建的GitHub仓库不是放hexo代码的，而是放hexo generate命令之后的public文件的 Hexo框架 hexo是快速、简洁且高效的博客框架，有超快速度渲染，支持Markdown，一键部署，插件和可扩展性等。 安装hexo， 1$ npm install -g hexo 新建一个文件夹，在文件夹里，右键使用VS Code打开。在VS Code的菜单的Terminal，点击新建Terminal后，在Terminal运行 1$ hexo init 命令，成功后会在这个文件夹出现hexo初始文件。 生成和本地预览 12$ hexo generate #生成静态页面至public目录$ hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server） 发布前，一般可能要安装 1$ npm install --save hexo-deployer-git 然后修改根目录下的*_config.yml*，如下： 1234deploy: type: git repo: https://github.com/bet2019/bet2019.GitHub.io.git branch: master hexo基本命令 hexo new “pageName” hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，'ctrl + c’关闭server） hexo deploy #部署到GitHub 更多命令 关于主题样式，更多主题 最后，写Blog熟悉Markdown的语法，会写出样式更丰富的Blog。","categories":[],"tags":[]}],"categories":[{"name":"NodeJs, Joi","slug":"NodeJs-Joi","permalink":"https://bet2019.github.io/categories/NodeJs-Joi/"},{"name":"ROS","slug":"ROS","permalink":"https://bet2019.github.io/categories/ROS/"},{"name":"Azure, ROS","slug":"Azure-ROS","permalink":"https://bet2019.github.io/categories/Azure-ROS/"},{"name":"Azure","slug":"Azure","permalink":"https://bet2019.github.io/categories/Azure/"}],"tags":[{"name":"Joi","slug":"Joi","permalink":"https://bet2019.github.io/tags/Joi/"},{"name":"ROS, Fast DDS","slug":"ROS-Fast-DDS","permalink":"https://bet2019.github.io/tags/ROS-Fast-DDS/"},{"name":"Azure, IoT, MQTT","slug":"Azure-IoT-MQTT","permalink":"https://bet2019.github.io/tags/Azure-IoT-MQTT/"},{"name":"Azure, DevOps","slug":"Azure-DevOps","permalink":"https://bet2019.github.io/tags/Azure-DevOps/"}]}
{"meta":{"title":"Bet2019","subtitle":"","description":"","author":"Daniel Niu","url":"http://example.com","root":"/"},"pages":[{"title":"About","date":"2017-10-04T05:02:37.000Z","updated":"2020-11-17T06:36:02.795Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"联系我 邮箱：niuxiaohui03@163.com GitHub: https://github.com/bet2019"},{"title":"Repositories","date":"2020-11-17T06:43:24.576Z","updated":"2020-11-17T06:43:24.576Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"Tags","date":"2020-11-17T06:44:05.852Z","updated":"2020-11-17T06:44:05.852Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2020-11-17T06:44:18.797Z","updated":"2020-11-17T06:44:18.797Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-11-12T06:38:49.587Z","updated":"2020-09-01T14:02:39.000Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""}],"posts":[{"title":"Joid对字符串字段的校验-empty","slug":"Joid对字符串字段的校验-empty","date":"2020-12-09T02:22:14.000Z","updated":"2020-12-09T02:53:43.291Z","comments":true,"path":"2020/12/09/Joid对字符串字段的校验-empty/","link":"","permalink":"http://example.com/2020/12/09/Joid%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5%E7%9A%84%E6%A0%A1%E9%AA%8C-empty/","excerpt":"","text":"后端用NodeJs开发，在router时候，我们可能会用到Jois组件帮助我们对get, patch等方法的params或者body进行校验。 12345router.route(&#x27;/abc&#x27;) .patch(hasPermissions(&#x27;xxx&#x27;), [ validateParams(Joi.object(&#123;uuid: Joi.string().uuid().required()&#125;)), validateBody(validationSchema.editData) ], indexController.editAction) 只能为字符串，但要注意empty 1234567let schema = Joi.object(&#123; name : Joi.string().empty(&quot;&quot;),&#125;);let&#123;error, value&#125; = schema.validate(data);let data = &#123;name:&quot;&quot;&#125; /*通过校验*/ let data = &#123;name:null&#125; /*不通过校验, 提示name必须为string类型*/ 这里着重说明下empty用法，API 17.3.0如下 any.empty(schema) Considers anything that matches the schema to be empty (undefined). 1234let schema = Joi.string().empty(&#x27;&#x27;);schema.validate(&#x27;&#x27;); // returns &#123; error: null, value: undefined &#125;schema = schema.empty();schema.validate(&#x27;&#x27;); // returns &#123; error: &quot;value&quot; is not allowed to be empty, value: &#x27;&#x27; &#125; 如果用了name : Joi.string().empty(“”)，那么name不会传到editAction里面。也就是说’'的情况忽略。 什么什么时候给了name变量值，如张三 想在前端给name的输入框，删除张三，保存后，name的值传到后端是’’ 然而，在Joi校验时候，name=''传不到controller的action方法，也就不能保存空字串了。 允许空字符串和null 123let schema = Joi.object(&#123; name : Joi.string().allow(...[null, &quot;&quot;]),&#125;);","categories":[{"name":"NodeJs, Joi","slug":"NodeJs-Joi","permalink":"http://example.com/categories/NodeJs-Joi/"}],"tags":[{"name":"Joi","slug":"Joi","permalink":"http://example.com/tags/Joi/"}]},{"title":"ROS on Windows","slug":"ROS-on-Windows","date":"2020-11-30T12:50:56.000Z","updated":"2020-12-07T01:35:29.554Z","comments":true,"path":"2020/11/30/ROS-on-Windows/","link":"","permalink":"http://example.com/2020/11/30/ROS-on-Windows/","excerpt":"","text":"Windows 10下安装ROS2 安装前提 ✔️ 64-bit (amd64) environment of Windows 10 Desktop. ✔️ Visual Studio 2019 with Desktop development with C++ workload included. ✔️ Chocolatey package manager installed. ✔️ Git source control software installed. 安装开始 从开始菜单，找到Developer Command Prompt for VS 2019 用管理员权限打开这个CMD 根据下面步骤安装ROS 2 Foxy版本 1234mkdir c:\\opt\\chocolatey #ROS默认安装在c:\\optset ChocolateyInstall=c:\\opt\\chocolateychoco source add -n=ros-win -s=&quot;https://aka.ms/ros/public&quot; --priority=1choco upgrade ros-foxy-desktop -y --execution-timeout=0 安装完ROS 2 ros-foxy-desktop，大概有5-6G大小。 创建快捷方式 SDF_PATH=c:\\opt\\ros\\foxy\\x64\\share\\sdformat\\1.6 把这个变量添加到环境变量 可以使用Windows Terminal，打开设置后，添加一下 123456...,&#123; &quot;commandline&quot; : &quot;C:\\\\Windows\\\\System32\\\\cmd.exe /k \\&quot;C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Community\\\\Common7\\\\Tools\\\\VsDevCmd.bat\\&quot; -arch=amd64 -host_arch=amd64 &amp;&amp; c:\\\\opt\\\\ros\\\\foxy\\\\x64\\\\setup.bat &amp;&amp; c:\\\\opt\\\\ros\\\\foxy\\\\x64\\\\share\\\\gazebo\\\\setup.bat&quot;, &quot;guid&quot; : &quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b0&#125;&quot;, &quot;name&quot; : &quot;ROS Noetic&quot;&#125; 现在，你就在ROS2的开发命令行窗口中。","categories":[{"name":"Azure, ROS","slug":"Azure-ROS","permalink":"http://example.com/categories/Azure-ROS/"}],"tags":[]},{"title":"Azure IoT- MQTT直连IoT Hub","slug":"Azure IoT- MQTT直连IoTHub","date":"2020-11-20T06:56:18.000Z","updated":"2020-12-07T01:34:27.812Z","comments":true,"path":"2020/11/20/Azure IoT- MQTT直连IoTHub/","link":"","permalink":"http://example.com/2020/11/20/Azure%20IoT-%20MQTT%E7%9B%B4%E8%BF%9EIoTHub/","excerpt":"","text":"不使用Azure IoT SDK情况下，MQTT协议直连IoT Hub 参考微软官网文档，不使用Azure IoT SDK情况下，使用MQTT连接IoT Hub的C++示例 下载官网的Repo代码 没安装Vcpkg的话，请安装Vcpkg，这里最好把下载的Vcpkg放在一个路径上没空格的文件夹下，不然这个步骤（.\\vcpkg install mosquitto:x64-windows）一直安装zlib失败 使用VS Code，在安装Azure Extension的情况下，在左侧边栏，展开Azure IoT Hub下的一个IoT设备，右键这个设备选择Start Monitering Built-in Event Point，用来监视MQTT来的数据 修改示例代码的参数，用下面命令获取SAS Token作为PWD 1$ az iot hub generate-sas-token -n &#123;your_iothub_name&#125; 对示例代码，运行TelemetryMQTTWin32工程（Ctrl+F5，或者F5）","categories":[{"name":"Azure","slug":"Azure","permalink":"http://example.com/categories/Azure/"}],"tags":[{"name":"Azure, IoT, MQTT","slug":"Azure-IoT-MQTT","permalink":"http://example.com/tags/Azure-IoT-MQTT/"}]},{"title":"Azure DevOps - 删除commit","slug":"Azure DevOps - 删除commit","date":"2020-11-17T05:35:38.000Z","updated":"2020-11-20T07:30:37.127Z","comments":true,"path":"2020/11/17/Azure DevOps - 删除commit/","link":"","permalink":"http://example.com/2020/11/17/Azure%20DevOps%20-%20%E5%88%A0%E9%99%A4commit/","excerpt":"","text":"TortoiseGit删除最后commit之前的连续commit 在最后提交commit之前， 可能有很小的改动，如typo，删除console.log等。那么可以把这些小改动放到最后的commit，删除之前的commit。 TortoiseGit打开commit log 在要删除的那些commit的前一个commit上，右键后，选择reset xxx to this 然后，右键这个commit id后，选择push 使用git的话，2个命令搞定： 12git reset --hard abc526ef839882b6d631c0c59296a2d6d43dae34 #想要恢复到的版本commit idgit push origin HEAD --force 在Azure Devops的Repo环境上使用 在Azure DeveOps环境上，可能会出现请使用ForcePush类似错误提示。那么确认在Project Settings-&gt;Repos-&gt;Repositories-&gt;你所在的group-&gt;Force push，对这个选项，选择Allow，如下图","categories":[{"name":"Azure","slug":"Azure","permalink":"http://example.com/categories/Azure/"}],"tags":[{"name":"Azure, DevOps","slug":"Azure-DevOps","permalink":"http://example.com/tags/Azure-DevOps/"}]},{"title":"第一个Blog","slug":"第一个Blog","date":"2020-11-11T07:13:55.000Z","updated":"2020-11-17T06:23:23.156Z","comments":true,"path":"2020/11/11/第一个Blog/","link":"","permalink":"http://example.com/2020/11/11/%E7%AC%AC%E4%B8%80%E4%B8%AABlog/","excerpt":"","text":"第一个Blog 用GitHub Pages搭建个人Blog，非常简单实用。主要有以下3个关键步骤 搭建开发环境 新建GitHub Repo Hexo框架 搭建开发环境 安装Node.js，Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。安装完Node.js后，npm也就安装上了，npm是包含在node.js里面的一个包管理工具，就像Linux中的yum，rpm包管理；python中的pip包管理工具一样，这会经常npm的命令。 安装TortoiseGit，安装其他的也可以Git，SourceTree等 安装Vistual Studio Code或其他IDE 创建GitHub仓库 登录GitHub（如果没账号，请注册）。 新建一个 你GitHub用户名.github.io 仓库，那么搭建成功后，你的网站访问地址就是 http://你GitHub用户名.github.io了。这样的话，可以免费使用了，如果想绑定其他域名的话，可以去阿里等运营商购买，关于DNS，https配置csdn上都有相关文章可以参考。 注意，这里创建的GitHub仓库不是放hexo代码的，而是放hexo generate命令之后的public文件的 Hexo框架 hexo是快速、简洁且高效的博客框架，有超快速度渲染，支持Markdown，一键部署，插件和可扩展性等。 安装hexo， 1$ npm install -g hexo 新建一个文件夹，在文件夹里，右键使用VS Code打开。在VS Code的菜单的Terminal，点击新建Terminal后，在Terminal运行 1$ hexo init 命令，成功后会在这个文件夹出现hexo初始文件。 生成和本地预览 12$ hexo generate #生成静态页面至public目录$ hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server） 发布前，一般可能要安装 1$ npm install --save hexo-deployer-git 然后修改根目录下的*_config.yml*，如下： 1234deploy: type: git repo: https://github.com/bet2019/bet2019.GitHub.io.git branch: master hexo基本命令 hexo new “pageName” hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，'ctrl + c’关闭server） hexo deploy #部署到GitHub 更多命令 关于主题样式，更多主题 最后，写Blog熟悉Markdown的语法，会写出样式更丰富的Blog。","categories":[],"tags":[]}],"categories":[{"name":"NodeJs, Joi","slug":"NodeJs-Joi","permalink":"http://example.com/categories/NodeJs-Joi/"},{"name":"Azure, ROS","slug":"Azure-ROS","permalink":"http://example.com/categories/Azure-ROS/"},{"name":"Azure","slug":"Azure","permalink":"http://example.com/categories/Azure/"}],"tags":[{"name":"Joi","slug":"Joi","permalink":"http://example.com/tags/Joi/"},{"name":"Azure, IoT, MQTT","slug":"Azure-IoT-MQTT","permalink":"http://example.com/tags/Azure-IoT-MQTT/"},{"name":"Azure, DevOps","slug":"Azure-DevOps","permalink":"http://example.com/tags/Azure-DevOps/"}]}